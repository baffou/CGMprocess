%% Postprocessing of cross-grating microscopy (CGM) interferograms
% (aka Quadriwave lateral shearing interferometry)
% G. Baffou
% CNRS - institut Fresnel
% May 2022

% Associated with the article:
% Quantitative phase microscopy using quadriwave lateral shearing interferometry (QLSI): principle, terminology, algorithm and grating shadow description.
% G. Baffou
% J. Phys. D: Appl. Phys. 54, 294002 (2021)

clear
close all

addpath(genpath(pwd))

%% experimental parameters
Gamma = 39e-6;  % period of the cross-grating (grexel size) [m]
d = 1e-3;       % grating-camera distance [m]
p = 6.5e-6;     % camera pixel size (dexel size) [m]

%% processing
% import the images
Itf = readmatrix('data/interferogram.txt');
Ref = readmatrix('data/interferogram_ref.txt');

Itf=Itf(1:302)


[Ny, Nx] = size(Itf);

% Fourier transform processing
FItf = fftshift(fft2(Itf));
FRef = fftshift(fft2(Ref));

% selection of a first order spot
h = figure;
zoom on
imagetf(FItf)
title('Zoom in, press the button and click on the 1 st order spot')
FirstOrderButton = uicontrol('Parent',h,'Style','pushbutton','String','1st order');
set(FirstOrderButton, 'callback',{@(src,event)selectFirstOrder(h)})

while isvalid(h)
    crops = h.UserData;
    pause(0.2)
end

% computation of the OPD

theta = crops.angle;
H = cell(2,1);
Href = cell(2,1);
[xx,yy] = meshgrid(1:Nx, 1:Ny);
for ii = 1:2
    R2C = (xx  -Nx/2-1-crops.shiftx).^2/crops.Rx^2 + (yy - Ny/2-1-crops.shifty).^2/crops.Ry^2;
    circle = (R2C < 1); %circular mask
    FItfc = FItf.*circle;
    FRefc = FRef.*circle;
    H{ii} = circshift(FItfc, [-crops.shifty, -crops.shiftx]);
    Href{ii} = circshift(FRefc, [-crops.shifty, -crops.shiftx]);
    crops = crops.rotate90();
end

Ix = ifft2(ifftshift(H{1}));
Iy = ifft2(ifftshift(H{2}));
Irefx = ifft2(ifftshift(Href{1}));
Irefy = ifft2(ifftshift(Href{2}));
alpha = Gamma/(4*pi*d);
DW1 = alpha*angle(Ix.*conj(Irefx));
DW2 = alpha*angle(Iy.*conj(Irefy));
DWx = theta.cos*DW1 - theta.sin*DW2;
DWy = theta.sin*DW1 + theta.cos*DW2;

[kx, ky] = meshgrid(1:Nx,1:Ny);
kx = kx-Nx/2-1;
ky = ky-Ny/2-1;
kx(logical((kx==0).*(ky==0)))=Inf;
ky(logical((kx==0).*(ky==0)))=Inf;

superW = ifft2(ifftshift((fftshift(fft2(DWx)) + 1i*fftshift(fft2(DWy)))./(1i*(kx/Nx + 1i*ky/Ny))));

W = p*real(superW/2);

%%
figure
imagesc(1e9*W)
xlabel('px')
ylabel('px')
set(gca,'DataAspectRatio',[1 1 1])
set(gca,'YDir','normal')
colorbar
title('reconstructed wavefront profile')





